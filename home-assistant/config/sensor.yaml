- platform: filter
  name: 'dishwasher power filtered'
  entity_id: 'sensor.dishwasher_power'
  filters:
    # We have unevenly spaced measurements so this seems more appropriate than low-pass filter.
    # However, it'll break down if we have only 1 measurement within the window_size, so it should
    # not be too low.
    - filter: time_simple_moving_average
      window_size: "00:00:40"

- platform: template
  sensors:
    dishwasher_state:
       unique_id: 'dishwasher_state_v1'
       friendly_name: Dishwasher
       value_template: >-
         {% if states('sensor.dishwasher_power_filtered')|float(default=0) >= 1500 %}
           heating
         {% elif states('sensor.dishwasher_power_filtered')|float(default=0) >= 2 %}
           washing
         {% elif states('sensor.dishwasher_power_filtered')|float(default=0) >= 1.34 %}
           drying
         {% elif states('sensor.dishwasher_power_filtered')|float(default=0) >= 1 %}
           off_closed 
         {% else %}
           off_open
         {% endif %}

- platform: filter
  name: 'washing machine power filtered'
  entity_id: 'sensor.washing_machine_power'
  filters:
    - filter: time_simple_moving_average
      window_size: "00:00:40"

- platform: template
  sensors:
    washing_machine_state:
       unique_id: 'washing_machine_state_v1'
       friendly_name: Washing Machine
       value_template: >-
         {% if states('sensor.washing_machine_power_filtered')|float(default=0) >= 1000 %}
           heating
         {% elif states('sensor.washing_machine_power_filtered')|float(default=0) >= 10 %}
           washing
         {% elif states('sensor.washing_machine_power_filtered')|float(default=0) >= 1 %}
           idle
         {% else %}
           off
         {% endif %}


# Not using filtered power for dryer, since it has an Aqara plug that 
# stops reporting when power is 0 W. Only starts again when it changes.
- platform: template
  sensors:
    dryer_state:
       unique_id: 'dryer_state_v1'
       friendly_name: Dryer
       value_template: >-
         {% if states('sensor.dryer_power')|float(default=0) >= 100 %}
           drying
         {% elif states('sensor.dryer_power')|float(default=0) > 1 %}
           idle
         {% else %}
           off
         {% endif %}


- platform: template
  sensors:
    nighttime:
       unique_id: 'nighttime_v2'
       friendly_name: Nighttime
       value_template: >-
         {% if states('sun.sun') == "above_horizon" %}
           0
         {% else %}
           1
         {% endif %}


# Extract temperature from the built-in weather functionality in order to use it elsewhere:
- platform: template
  sensors:
    met_no_temperature:
      unique_id: 'met_no_temperature'
      friendly_name: "Met.no Temperature"
      unit_of_measurement: 'Â°C'
      value_template: "{{ state_attr('weather.huis', 'temperature') }}"

