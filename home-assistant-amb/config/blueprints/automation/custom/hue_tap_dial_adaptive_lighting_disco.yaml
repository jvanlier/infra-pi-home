blueprint:
  name: Hue Tap Dial (Z2M) - Adaptive Lighting - disco
  description: >
    Implementation for Hue Tap Dial for Zigbee2MQTT with specific Adaptive Lighting (AL) support,
    and both manual and automatic color cycle (disco) on the color light group.

    Requirements:
    - 1 or more Zigbee groups for all ambiance lights, configured as light entity in AL
    - 1 Zigbee group for all color lights, configured as light entity in AL
    - 1 Zigbee group for _all_ lights (not configured in AL)
    - 1 input boolean for disco

    The _all_ group is used for switching all lights _off_ reliably and in sync, and for dimming.
    The _all_ group is not used for turning lights _on_, because that will not activate AL.

    N.b.: when dimming, adapt brightness gets disabled.

    Potential downside: different brightness levels can be configured for each group in the AL config.
    However, when dimming, they will all get the same brightness, so any difference is lost until AL is
    re-activated (using button 1).

    Disco features, meant for kids:
    - Button 2 is used to cycle through random colors after each press.
    - Button 4 activates disco (automatic random color cycle).

  domain: automation

  input:
    controller:
      name: (Zigbee2MQTT) Controller Name
      description: The name of the device in Zigbee2MQTT
    base_topic:
      name: Root/Base mqtt topic from Zigbee2MQTT
      description: The Root/base topic as configured in Zigbee2MQTT
      default: zigbee2mqtt
    brightness_max:
      name: Max brightness
      description: Maximum brightness for dimming, in case the max of 255 can become too bright under all circumstances.
      default: 255
      selector:
        number:
          min: 1
          max: 255
    brightness_step:
      name: Brightness step size
      description: Brightness step size
      default: 25
      selector:
        number:
          min: 1
          max: 50

    light_group_all:
      name: Single Zigbee group that contains all the lights.
      description: >
        Used for turning off and for dimming.
        It's not used for turning on, because then Adaptive Lighting doesn't register it.
      selector:
        entity:
          domain: light
          multiple: false

    light_group_color:
      name: Single Zigbee group that contains all the color lights.
      description: >
        These are the lights used for the disco.
      selector:
        entity:
          domain: light
          multiple: false

    switch_entities_adaptive_lighting:
      name: Adaptive Lighting switch entities.
      description: >
        The adaptive lighting switches, used for turning on with service adaptive_lighting.apply.
      selector:
        entity:
          domain: switch

    switch_entities_adapt_brightness:
      name: Adaptive Lighting adapt brightness switch entities.
      description: >
        The adaptive lighting adapt brightness switches, in order to turn off adaptive brightness when dimming them
        via the _all_ zigbee group.
      selector:
        entity:
          domain: switch

    input_boolean_disco:
      name: Input boolean for disco.
      description: >
        Input boolean for disco toggle.
      selector:
        entity:
          domain: input_boolean
          multiple: false

mode: restart

trigger_variables:
  base_topic: !input base_topic
  controller: !input controller

trigger:
  - platform: mqtt
    topic: "{{ base_topic ~ '/' ~ controller ~ '/action' }}"

# This condition is not strictly necessary, but it makes sure that the automation only triggers when there is a
# supported action. This makes for easier debugging etc.
condition:
  - condition: template
    value_template: "{{ trigger.payload in [
      'button_1_press',
      'button_2_press',
      'button_3_press',
      'button_4_press',
      'brightness_step_down',
      'brightness_step_up',
    ] }}"
    # Not implemented: press_release, hold, hold_release, dial_rotate_[left|right]_[slow|fast|step]

action:
  - variables:
      controller: !input controller
      command: "{{ trigger.payload }}"
      light_group_all: !input light_group_all
      current_brightness: >
        {{ state_attr(light_group_all, 'brightness') | int(0) }}
      brightness_max: !input brightness_max
      brightness_step: !input brightness_step
  - choose:
      - conditions: '{{ command == "button_1_press" }}'
        sequence:
          # Turn off disco, in case it was running:
          - service: input_boolean.turn_off
            target:
              entity_id: !input input_boolean_disco
          # Turn on adaptive brightness, in case it was turned off earlier due to dimming:
          - service: switch.turn_on
            target:
              entity_id: !input switch_entities_adapt_brightness
          - service: adaptive_lighting.apply
            data:
              entity_id: !input switch_entities_adaptive_lighting
              turn_on_lights: true
      - conditions: '{{ command == "button_3_press" }}'
        sequence:
          # Turn off disco, in case it was running:
          - service: input_boolean.turn_off
            target:
              entity_id: !input input_boolean_disco
          - service: light.turn_off
            target:
              entity_id: !input light_group_all
          # Turn on adaptive brightness, in case it was turned off earlier due to dimming, to be prepared
          # for the next turn on (it's also enabled above for button 1; the goal of this is handling turn-on via different
          # means.)
          - service: switch.turn_on
            target:
              entity_id: !input switch_entities_adapt_brightness
      - conditions: '{{ command == "brightness_step_down" }}'
        sequence:
          # Since we dim using Zigbee group with all lights, AL doesn't mark them as manually controlled.
          # So we turn off adaptive brightness manually:
          - service: switch.turn_off
            target:
              entity_id: !input switch_entities_adapt_brightness
          - service: light.turn_on
            data:
              transition: 1
              brightness: "{{ max(current_brightness - brightness_step, 1) }}"
            target:
              entity_id: !input light_group_all
      - conditions: '{{ command == "brightness_step_up" }}'
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input switch_entities_adapt_brightness
          - service: light.turn_on
            data:
              transition: 1
              brightness: "{{ min(current_brightness + brightness_step, brightness_max) }}"
            target:
              entity_id: !input light_group_all
      - conditions: '{{ command == "button_2_press" }}'
        # Manual random color
        sequence:
          # Turn off disco, in case it was running:
          - service: input_boolean.turn_off
            target:
              entity_id: !input input_boolean_disco
          - service: light.turn_on
            data:
              transition: 1
              rgb_color: ["{{ range(0, 255) | random }}", "{{ range(0, 255) | random  }}", "{{ range(0, 255) | random  }}"]
            target:
              entity_id: !input light_group_color
      - conditions: '{{ command == "button_4_press" }}'
        # Automatic disco
        sequence:
          - service: input_boolean.toggle
            target:
              entity_id: !input input_boolean_disco
